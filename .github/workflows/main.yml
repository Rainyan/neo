name: CI

on:
  push:
    branches: [ build_test_win ]
  pull_request:
    branches: [ build_test_win ]
    types: [ synchronize ]

jobs:
  build:
    strategy:
      matrix:
        os: [ windows-latest ]

    runs-on: ${{ matrix.os }}
    
    steps:
    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - uses: actions/checkout@v2
    #- uses: ilammy/msvc-dev-cmd@v1
    #  with:
    #    arch: 'x86'
    #    toolset: '12.0'
      
    - name: Install Microsoft Speech SDK 5.1
      env:
        SPEECH_SDK_URL: 'https://download.microsoft.com/download/B/4/3/B4314928-7B71-4336-9DE7-6FA4CF00B7B3/SpeechSDK51.exe'
        SPEECH_SDK_NAME: 'SpeechSDK51'
        SPEECH_SDK_CONTAINED_INSTALLER: 'Microsoft Speech SDK 5.1.msi'
      run: |
        echo "Downloading ${env:SPEECH_SDK_NAME}..."
        Invoke-WebRequest ${env:SPEECH_SDK_URL} -OutFile .\${env:SPEECH_SDK_NAME}.exe

        # Based on https://devblogs.microsoft.com/scripting/reporting-on-digitally-signed-files-with-powershell/
        Function Expand-AuthenticodeSignature($AuthenticodeSignature)
        {
          $AuthenticodeSignature | Select-object -Property Path, `
            Status,StatusMessage,SignatureType, `
            @{Name=’SubjectName’;Expression={($_.SignerCertificate.Subject)}}, `
            @{Name=’SubjectIssuer’;Expression={($_.SignerCertificate.Issuer)}}, `
            @{Name=’SubjectSerialNumber’;Expression={($_.SignerCertificate.SerialNumber)}}, `
            @{Name=’SubjectNotBefore’;Expression={($_.SignerCertificate.NotBefore)}}, `
            @{Name=’SubjectNotAfter’;Expression={($_.SignerCertificate.NotAfter)}}, `
            @{Name=’SubjectThumbprint’;Expression={($_.SignerCertificate.ThumbPrint)}}, `
            @{Name=’TimeStamperName’;Expression={($_.SignerCertificate.Subject)}}, `
            @{Name=’TimeStamperIssuer’;Expression={($_.SignerCertificate.Issuer)}}, `
            @{Name=’TimeStamperSerialNumber’;Expression={($_.SignerCertificate.SerialNumber)}}, `
            @{Name=’TimeStamperNotBefore’;Expression={($_.SignerCertificate.NotBefore)}}, `
            @{Name=’TimeStamperNotAfter’;Expression={($_.SignerCertificate.NotAfter)}}, `
            @{Name=’TimeStamperThumbprint’;Expression={($_.SignerCertificate.ThumbPrint)}}
        }

        $speechSdkSig = Expand-AuthenticodeSignature -AuthenticodeSignature (Get-ChildItem .\${env:SPEECH_SDK_NAME}.exe | Get-AuthenticodeSignature)

        # Need to match this digital signature.
        $sigRequirements = @{
          "Status" = "Valid";
          "StatusMessage" = "Signature verified.";
          "SignatureType" = "Authenticode";
          "SubjectName" = "CN=Microsoft Corporation, OU=Copyright (c) 2001 Microsoft Corp., O=Microsoft Corporation, L=Redmond, S=Washington, C=US";
        }

        foreach ($requirement in $sigRequirements.GetEnumerator()) {	
          $reqName = $requirement.Name
          $reqValue = $requirement.Value
          $sigValue = $speechSdkSig.$reqName
          if (-Not ($reqValue -eq $sigValue)) {
            throw "Digital signature mismatched value of $reqName (was '$sigValue' but expected '$reqValue')"
          }
        }
        echo "File ${env:SPEECH_SDK_NAME} passed digital signature checks."
        
        echo "Unarchiving ${env:SPEECH_SDK_NAME} installer..."
        Rename-Item -Path .\${env:SPEECH_SDK_NAME}.exe -NewName .\${env:SPEECH_SDK_NAME}.zip
        $unZipDir = "${env:SPEECH_SDK_NAME}_files"
        Expand-Archive -Path .\${env:SPEECH_SDK_NAME}.zip -DestinationPath .\${unZipDir}
        
        echo "Installing ${env:SPEECH_SDK_NAME}..."
        $installerFullPath = $pwd.Path + "\${unZipDir}\${env:SPEECH_SDK_CONTAINED_INSTALLER}"
        echo "Installer full path: '${installerFullPath}'"
        msiexec /norestart /passive /i "${installerFullPath}"

